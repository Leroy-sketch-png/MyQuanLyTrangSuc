// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MyQuanLyTrangSuc.Model;

public partial class MyQuanLyTrangSucContext : DbContext {

    //Singleton
    private static MyQuanLyTrangSucContext instance;
    public static MyQuanLyTrangSucContext Instance {
        get {
            if (instance == null) {
                instance = new MyQuanLyTrangSucContext();
            }
            return instance;
        }
    }
    private MyQuanLyTrangSucContext()
    : base() {
    }
    //
    private MyQuanLyTrangSucContext(DbContextOptions<MyQuanLyTrangSucContext> options)
        : base(options) {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Import> Imports { get; set; }

    public virtual DbSet<ImportDetail> ImportDetails { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }

    public virtual DbSet<Parameter> Parameters { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceDetail> ServiceDetails { get; set; }

    public virtual DbSet<ServiceRecord> ServiceRecords { get; set; }

    public virtual DbSet<StockReport> StockReports { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Unit> Units { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder) {
        modelBuilder.Entity<Account>(entity => {
            entity.HasKey(e => e.AccountId).HasName("PK__Account__F267253E533820CA");

            entity.ToTable("Account");

            entity.HasIndex(e => e.Username, "UQ__Account__F3DBC57237681E46").IsUnique();

            entity.Property(e => e.AccountId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("accountID");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("employeeID");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("passwordHash");
            entity.Property(e => e.Role)
                .HasMaxLength(255)
                .HasColumnName("role");
            entity.Property(e => e.Username)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("username");

            entity.HasOne(d => d.Employee).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK__Account__employe__6D0D32F4");
        });

        modelBuilder.Entity<Customer>(entity => {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__B611CB9D6148C87A");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.ContactNumber, "UQ__Customer__4F86E9D76403858C").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Customer__AB6E616416FF7963").IsUnique();

            entity.Property(e => e.CustomerId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("customerID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.ContactNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("contactNumber");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .HasColumnName("customerName");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
        });

        modelBuilder.Entity<Employee>(entity => {
            entity.HasKey(e => e.EmployeeId).HasName("PK__Employee__C134C9A18780A778");

            entity.ToTable("Employee");

            entity.HasIndex(e => e.ContactNumber, "UQ__Employee__4F86E9D761518EF5").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Employee__AB6E6164546D5321").IsUnique();

            entity.Property(e => e.EmployeeId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("employeeID");
            entity.Property(e => e.ContactNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("contactNumber");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.ImagePath)
                .HasMaxLength(255)
                .HasColumnName("imagePath");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Position)
                .HasMaxLength(255)
                .HasColumnName("position");
        });

        modelBuilder.Entity<Import>(entity => {
            entity.HasKey(e => e.ImportId).HasName("PK__Import__2CC5AB07EE17FB43");

            entity.ToTable("Import");

            entity.Property(e => e.ImportId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("importID");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("supplierID");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totalAmount");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Imports)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK__Import__supplier__5CD6CB2B");
        });

        modelBuilder.Entity<ImportDetail>(entity => {
            entity.HasKey(e => e.Stt).HasName("PK__ImportDe__DDDF328EFE66CD3D");

            entity.ToTable("ImportDetail");

            entity.HasIndex(e => new { e.ImportId, e.ProductId }, "UQ__ImportDe__9E14A61295746939").IsUnique();

            entity.Property(e => e.Stt)
                .ValueGeneratedNever()
                .HasColumnName("stt");
            entity.Property(e => e.ImportId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("importID");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("price");
            entity.Property(e => e.ProductId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("productID");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totalPrice");

            entity.HasOne(d => d.Import).WithMany(p => p.ImportDetails)
                .HasForeignKey(d => d.ImportId)
                .HasConstraintName("FK__ImportDet__impor__60A75C0F");

            entity.HasOne(d => d.Product).WithMany(p => p.ImportDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__ImportDet__produ__619B8048");
        });

        modelBuilder.Entity<Invoice>(entity => {
            entity.HasKey(e => e.InvoiceId).HasName("PK__Invoice__1252410C3AACA18D");

            entity.ToTable("Invoice");

            entity.Property(e => e.InvoiceId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("invoiceID");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("customerID");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totalAmount");

            entity.HasOne(d => d.Customer).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Invoice__custome__6477ECF3");
        });

        modelBuilder.Entity<InvoiceDetail>(entity => {
            entity.HasKey(e => e.Stt).HasName("PK__InvoiceD__DDDF328EF653F223");

            entity.ToTable("InvoiceDetail");

            entity.HasIndex(e => new { e.InvoiceId, e.ProductId }, "UQ__InvoiceD__A0834C193DC840D9").IsUnique();

            entity.Property(e => e.Stt)
                .ValueGeneratedNever()
                .HasColumnName("stt");
            entity.Property(e => e.InvoiceId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("invoiceID");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("price");
            entity.Property(e => e.ProductId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("productID");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totalPrice");

            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoiceDetails)
                .HasForeignKey(d => d.InvoiceId)
                .HasConstraintName("FK__InvoiceDe__invoi__68487DD7");

            entity.HasOne(d => d.Product).WithMany(p => p.InvoiceDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__InvoiceDe__produ__693CA210");
        });

        modelBuilder.Entity<Parameter>(entity => {
            entity
                .HasNoKey()
                .ToTable("Parameter");

            entity.Property(e => e.ConstName)
                .HasMaxLength(20)
                .HasColumnName("constName");
            entity.Property(e => e.ConstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("constValue");
        });

        modelBuilder.Entity<Product>(entity => {
            entity.HasKey(e => e.ProductId).HasName("PK__Product__2D10D14AE471C970");

            entity.ToTable("Product");

            entity.Property(e => e.ProductId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("productID");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("categoryID");
            entity.Property(e => e.ImagePath)
                .HasMaxLength(255)
                .HasColumnName("imagePath");
            entity.Property(e => e.Material)
                .HasMaxLength(255)
                .HasColumnName("material");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("price");
            entity.Property(e => e.Quantity).HasColumnName("quantity");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__Product__categor__4E88ABD4");
        });

        modelBuilder.Entity<ProductCategory>(entity => {
            entity.HasKey(e => e.CategoryId).HasName("PK__ProductC__23CAF1F81FD3A71F");

            entity.ToTable("ProductCategory");

            entity.Property(e => e.CategoryId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("categoryID");
            entity.Property(e => e.Categoryname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("categoryname");
            entity.Property(e => e.ProfitPercentage).HasColumnName("profitPercentage");
            entity.Property(e => e.UnitId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("unitID");

            entity.HasOne(d => d.Unit).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK__ProductCa__unitI__4BAC3F29");
        });

        modelBuilder.Entity<Service>(entity => {
            entity.HasKey(e => e.ServiceId).HasName("PK__Service__4550733F5AC58340");

            entity.ToTable("Service");

            entity.Property(e => e.ServiceId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("serviceID");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(20)
                .HasColumnName("serviceName");
            entity.Property(e => e.ServicePrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("servicePrice");
        });

        modelBuilder.Entity<ServiceDetail>(entity => {
            entity.HasKey(e => new { e.ServiceRecordId, e.ServiceId }).HasName("PK__ServiceD__6FC5D3762091692B");

            entity.ToTable("ServiceDetail");

            entity.Property(e => e.ServiceRecordId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("serviceRecordID");
            entity.Property(e => e.ServiceId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("serviceID");
            entity.Property(e => e.DueDay)
                .HasColumnType("datetime")
                .HasColumnName("dueDay");
            entity.Property(e => e.ExtraExpense)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("extraExpense");
            entity.Property(e => e.Prepaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("prepaid");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");

            entity.HasOne(d => d.Service).WithMany(p => p.ServiceDetails)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServiceDe__servi__797309D9");

            entity.HasOne(d => d.ServiceRecord).WithMany(p => p.ServiceDetails)
                .HasForeignKey(d => d.ServiceRecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServiceDe__servi__787EE5A0");
        });

        modelBuilder.Entity<ServiceRecord>(entity => {
            entity.HasKey(e => e.ServiceRecordId).HasName("PK__ServiceR__8B90D445F20FA176");

            entity.ToTable("ServiceRecord");

            entity.Property(e => e.ServiceRecordId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("serviceRecordID");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("customerID");
            entity.Property(e => e.ImagePath)
                .HasMaxLength(255)
                .HasColumnName("imagePath");

            entity.HasOne(d => d.Customer).WithMany(p => p.ServiceRecords)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__ServiceRe__custo__75A278F5");
        });

        modelBuilder.Entity<StockReport>(entity => {
            entity.HasKey(e => new { e.MonthYear, e.ProductId }).HasName("PK__StockRep__2CD5A41C9C678F48");

            entity.ToTable("StockReport");

            entity.Property(e => e.MonthYear).HasColumnName("monthYear");
            entity.Property(e => e.ProductId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("productID");
            entity.Property(e => e.BeginStock).HasColumnName("beginStock");
            entity.Property(e => e.FinishStock).HasColumnName("finishStock");
            entity.Property(e => e.PurchaseQuantity).HasColumnName("purchaseQuantity");
            entity.Property(e => e.SalesQuantity).HasColumnName("salesQuantity");

            entity.HasOne(d => d.Product).WithMany(p => p.StockReports)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StockRepo__produ__6FE99F9F");
        });

        modelBuilder.Entity<Supplier>(entity => {
            entity.HasKey(e => e.SupplierId).HasName("PK__Supplier__DB8E62CD7EE867B5");

            entity.ToTable("Supplier");

            entity.HasIndex(e => e.ContactNumber, "UQ__Supplier__4F86E9D7DC21176D").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Supplier__AB6E6164440DCD9C").IsUnique();

            entity.Property(e => e.SupplierId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("supplierID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.ContactNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("contactNumber");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Unit>(entity => {
            entity.HasKey(e => e.UnitId).HasName("PK__Unit__55D79215DE05D27B");

            entity.ToTable("Unit");

            entity.Property(e => e.UnitId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("unitID");
            entity.Property(e => e.UnitName)
                .HasMaxLength(20)
                .HasColumnName("unitName");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
        if (!optionsBuilder.IsConfigured) {
            optionsBuilder.UseSqlServer("Server=LAPTOP-CMTNMGDI\\SQLEXPRESS;Database=MyQuanLyTrangSuc;Trusted_Connection=True;TrustServerCertificate=True;");
            //optionsBuilder.UseSqlServer("Server=DESKTOP-71PN892\\SQLEXPRESS;;Trusted_Connection=True;");
        }
    }
}